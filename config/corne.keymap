/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        alpha {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp CAPS   &kp Q        &kp W       &kp E            &kp R         &kp T        &kp Y          &kp U         &kp I        &kp O       &kp P                 &kp BACKSLASH
&kp TAB    &mt LCTRL A  &mt LALT S  &mt LEFT_META D  &mt LSHIFT F  &kp G        &kp H          &mt RSHIFT J  &mt RMETA K  &mt LALT L  &mt RSHIFT SEMICOLON  &kp SQT
&kp LSHFT  &kp Z        &kp X       &kp C            &kp V         &kp B        &kp N          &kp M         &kp COMMA    &kp DOT     &kp FSLH              &kp RSHIFT
                                    &kp LGUI         &mo 1         &kp SPACE    &kp BACKSPACE  &lt 2 SPACE   &trans
            >;
        };

        num_sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB     &kp EXCL            &kp AT             &kp POUND           &kp DOLLAR           &kp PERCENT        &kp CARET         &kp AMPS           &kp ASTRK     &kp LPAR         &kp RPAR       &kp BSPC
&bt BT_CLR  &mt LCTRL NUMBER_1  &mt LALT NUMBER_2  &mt LMETA NUMBER_3  &mt LSHIFT NUMBER_4  &kp N5             &kp NUMBER_6      &mt LSHFT N7       &mt RMETA N8  &mt LC(LALT) N9  &kp N0         &kp ENTER
&trans      &kp GRAVE           &kp PLUS           &kp EQUAL           &kp LEFT_BRACE       &kp RIGHT_BRACE    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS     &kp UNDER        &kp BACKSLASH  &trans
                                                   &to 0               &trans               &kp SPACE          &kp ESC           &lt 3 ENTER        &trans
            >;
        };

        navigation {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET   &kp AMPS  &kp ASTRK   &kp LPAR    &kp C_VOL_UP  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp LEFT    &kp DOWN  &kp UP      &kp RIGHT   &kp C_VOL_DN  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp C_PREV  &kp C_PP  &kp C_STOP  &kp C_NEXT  &kp K_MUTE    &kp TILDE
                             &trans    &trans    &kp SPACE    &kp RET     &trans    &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 0  &bt BT_SEL 3  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 1  &bt BT_SEL 4  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &bt BT_SEL 2  &bt BT_CLR    &trans  &trans  &trans  &trans
                        &to 0   &trans  &trans    &trans        &trans        &trans
            >;
        };
    };
};
